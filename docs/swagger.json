{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive social media backend with posts, video calling, and file uploads",
        "title": "Social Media Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "2.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change current user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or current password incorrect",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Send password reset email to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with email/username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with tokens",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidate current user session and tokens",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Logout failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful with tokens",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or registration failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/resend-verification": {
            "post": {
                "description": "Resend email verification link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend verification email",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification email sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Reset password using token from email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password data",
                        "name": "reset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "get": {
                "description": "Verify user email address using token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/calls": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new call and send call request to the callee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Initiate a new call",
                "parameters": [
                    {
                        "description": "Call initiation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.InitiateCallRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.CallResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/active": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's currently active calls",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get active calls",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.ActiveCallsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/connection-stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about WebSocket connections (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get WebSocket connection statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's call history with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get call history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pagination cursor",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of calls to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.CallHistoriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's call statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get call statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.CallStatsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/webrtc-config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get STUN/TURN server configuration for WebRTC",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get WebRTC configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models.WebRTCConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific call",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Get call details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.CallDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/{id}/accept": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept an incoming call",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Accept a call",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/{id}/decline": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Decline an incoming call",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "Decline a call",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/calls/{id}/end": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "End an ongoing call",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calls"
                ],
                "summary": "End a call",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/chat/rooms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of chat rooms for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get user chat rooms",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "archive",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User rooms",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.ChatRoomsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Fetch failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new chat room (group or private)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Create chat room",
                "parameters": [
                    {
                        "description": "Room creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.CreateChatRoomRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created room",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoom"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Creation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/chat/rooms/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific chat room",
                "tags": [
                    "Chat"
                ],
                "summary": "Delete chat room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Delete failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of user's friends with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get friends list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of friends to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "after",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friends list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/accept-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept a friend request from another user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Accept friend request",
                "parameters": [
                    {
                        "description": "Sender user ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.AcceptFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/blocked": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users blocked by current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get blocked users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of users to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blocked users list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/decline-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Decline a friend request from another user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Decline friend request",
                "parameters": [
                    {
                        "description": "Sender user ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.DeclineFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request declined",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of received or sent friend requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get friend requests",
                "parameters": [
                    {
                        "enum": [
                            "all",
                            "sent",
                            "received"
                        ],
                        "type": "string",
                        "default": "\"all\"",
                        "description": "Request type: received, sent, or all",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Number of requests to return",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "after",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend requests list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/requests-stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get stats of received or sent friend requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get friend requests stats",
                "responses": {
                    "200": {
                        "description": "Friend requests stats",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/send-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a friend request to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Send friend request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Target user ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Optional message",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user from friends list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Remove friend",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Friend user ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend removed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid friend ID or not friends",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/{id}/block": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Block a user and remove from friends if applicable",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to block",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User blocked",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or already blocked",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/{id}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check friendship status between current user and another user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Check friendship status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to check",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friendship status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/{id}/unblock": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unblock a previously blocked user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Unblock user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to unblock",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User unblocked",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or not blocked",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get posts with cursor-based pagination. If user_id is provided, returns posts from that specific user. If user_id is null, returns posts from friends.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get user posts",
                "parameters": [
                    {
                        "type": "string",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts data",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.PostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new post with text, images, or videos using form data",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post type (text, image, video, audio, link)",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post content",
                        "name": "content",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Post privacy (public, friends, private)",
                        "name": "privacy",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Post location",
                        "name": "location",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Post tags (comma separated)",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Media files (images, videos, documents)",
                        "name": "files",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created post",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/feed": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get personalized feed with posts from friends",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get user feed",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of posts to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feed data",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.PostResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/public": {
            "get": {
                "description": "Get public posts for explore page",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get public feed",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of posts to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public feed data",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.PostResponse"
                        }
                    }
                }
            }
        },
        "/posts/search": {
            "get": {
                "description": "Search posts by content or tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Search posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of posts to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.PostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get post by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post data",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Update post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Post update data",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.UpdatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated post",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a post",
                "tags": [
                    "Posts"
                ],
                "summary": "Delete post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid post ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/{id}/comments": {
            "get": {
                "description": "Get comments for a specific post with cursor-based pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get post comments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of comments to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comments data",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_responses.CommentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a comment on a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created comment",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/{id}/like": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Toggle like status on a post",
                "tags": [
                    "Posts"
                ],
                "summary": "Like/Unlike post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"like\"",
                        "description": "Type of like",
                        "name": "like_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/{id}/share": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Share a post to user's timeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Share post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Share data",
                        "name": "share",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_requests.SharePostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created share",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Share"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts/{id}/view": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "View a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "View post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get my profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Profile not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's profile information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Display name",
                        "name": "display_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bio",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone number",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Date of birth (YYYY-MM-DD)",
                        "name": "date_of_birth",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Avatar image",
                        "name": "avatar",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Wall image",
                        "name": "wall_image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create or update profile for authenticated user using multipart form data",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create or update profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Display name",
                        "name": "display_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bio",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone number",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Date of birth (YYYY-MM-DD)",
                        "name": "date_of_birth",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Avatar image",
                        "name": "avatar",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Wall image",
                        "name": "wall_image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created or updated profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Search across posts, users, and comments with flexible filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Global search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Content type filter (post, user, comment)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by author ID",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Privacy filter (public, friends, private)",
                        "name": "privacy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "relevance",
                        "description": "Sort order (relevance, date, popularity)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results (1-100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable result highlighting",
                        "name": "highlight",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable fuzzy search",
                        "name": "fuzzy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Enable faceted search",
                        "name": "facets",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date filter (RFC3339 format)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date filter (RFC3339 format)",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/admin/documents/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a specific document from the search index (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Delete search document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Delete failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/admin/reindex": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Rebuild the entire search index (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Reindex all content",
                "responses": {
                    "200": {
                        "description": "Reindex successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Reindex failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/admin/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about the search index (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get search statistics",
                "responses": {
                    "200": {
                        "description": "Search statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Stats failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/advanced": {
            "post": {
                "description": "Perform advanced search with complex JSON-based filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Advanced search",
                "parameters": [
                    {
                        "description": "Advanced search parameters",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/autocomplete": {
            "get": {
                "description": "Get search suggestions for partial queries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Auto-complete search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Partial search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content type filter (post, user, comment)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of suggestions (1-50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search suggestions",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.AutoCompleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Autocomplete failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/comments": {
            "get": {
                "description": "Search for comments with filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results (1-100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by author ID",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable result highlighting",
                        "name": "highlight",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "relevance",
                        "description": "Sort order (relevance, date)",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchResponse"
                        }
                    },
                    "500": {
                        "description": "Search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/posts": {
            "get": {
                "description": "Search for posts with specific filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results (1-100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by author ID",
                        "name": "author_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Privacy filter (public, friends, private)",
                        "name": "privacy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable result highlighting",
                        "name": "highlight",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "relevance",
                        "description": "Sort order (relevance, date, popularity)",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchResponse"
                        }
                    },
                    "500": {
                        "description": "Search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/trending-tags": {
            "get": {
                "description": "Get currently trending hashtags based on post frequency",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get trending tags",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of tags to return (1-50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trending tags",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Trends failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/search/users": {
            "get": {
                "description": "Search for users by username, display name, or bio",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results (1-100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable result highlighting",
                        "name": "highlight",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "relevance",
                        "description": "Sort order (relevance, date)",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User search results",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_services.SearchResponse"
                        }
                    },
                    "500": {
                        "description": "Search failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/avatar": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload avatar image for current user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Upload avatar",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upload success with avatar URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid file",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/online-status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's online status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update online status",
                "parameters": [
                    {
                        "description": "Online status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "description": "Search for users by username, display name, or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of users to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's privacy and notification settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user settings",
                "responses": {
                    "200": {
                        "description": "User settings",
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.UserSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's privacy and notification settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user settings",
                "parameters": [
                    {
                        "description": "User settings",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/social_server_internal_models_postgres.UserSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated settings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{id}/stats": {
            "get": {
                "description": "Get user statistics like post count, friend count, etc.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user stats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ws/chat": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establish WebSocket connection for real-time chat messaging",
                "tags": [
                    "Chat"
                ],
                "summary": "Connect to chat WebSocket",
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "paginator.Cursor": {
            "type": "object",
            "properties": {
                "after": {
                    "type": "string"
                },
                "before": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models.ICEServerConfig": {
            "type": "object",
            "properties": {
                "credential": {
                    "type": "string"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models.WebRTCConfig": {
            "type": "object",
            "properties": {
                "ice_servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models.ICEServerConfig"
                    }
                }
            }
        },
        "social_server_internal_models_postgres.Call": {
            "type": "object",
            "properties": {
                "answer_sdp": {
                    "type": "string"
                },
                "callee": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "callee_id": {
                    "type": "integer"
                },
                "caller": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "caller_id": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "duration": {
                    "description": "in seconds",
                    "type": "integer"
                },
                "ended_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_group_call": {
                    "type": "boolean"
                },
                "offer_sdp": {
                    "description": "WebRTC specific",
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.CallParticipant"
                    }
                },
                "room_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "description": "pending, ringing, ongoing, ended, declined, missed",
                    "type": "string"
                },
                "type": {
                    "description": "video, audio",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.CallParticipant": {
            "type": "object",
            "properties": {
                "call": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "call_id": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_muted": {
                    "type": "boolean"
                },
                "joined_at": {
                    "type": "string"
                },
                "left_at": {
                    "type": "string"
                },
                "peer_id": {
                    "description": "WebRTC specific",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.ChatRoom": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "created_by": {
                    "type": "integer"
                },
                "creator": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "last_activity": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                    }
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Participant"
                    }
                },
                "settings": {
                    "description": "Embedded settings",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoomSettings"
                        }
                    ]
                },
                "type": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoomType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.ChatRoomSettings": {
            "type": "object",
            "properties": {
                "allow_file_sharing": {
                    "type": "boolean"
                },
                "allow_image_sharing": {
                    "type": "boolean"
                },
                "allow_video_sharing": {
                    "type": "boolean"
                },
                "message_encryption": {
                    "type": "boolean"
                },
                "only_admins_can_invite": {
                    "type": "boolean"
                },
                "only_admins_can_post": {
                    "type": "boolean"
                }
            }
        },
        "social_server_internal_models_postgres.ChatRoomType": {
            "type": "string",
            "enum": [
                "private",
                "group",
                "private",
                "group",
                "private",
                "group"
            ],
            "x-enum-varnames": [
                "ChatRoomTypePrivate",
                "ChatRoomTypeGroup"
            ]
        },
        "social_server_internal_models_postgres.Comment": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "edited_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_edited": {
                    "type": "boolean"
                },
                "like_count": {
                    "type": "integer"
                },
                "likes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.CommentLike"
                    }
                },
                "media": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "mentioned_users": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                },
                "parent_id": {
                    "type": "integer"
                },
                "post": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    ]
                },
                "post_id": {
                    "type": "integer"
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                    }
                },
                "reply_count": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.CommentLike": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                        }
                    ]
                },
                "comment_id": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.FriendRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "receiver": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "receiver_id": {
                    "type": "integer"
                },
                "sender": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "sender_id": {
                    "type": "integer"
                },
                "status": {
                    "description": "pending, accepted, rejected",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.FriendRequestStatus"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.FriendRequestStatus": {
            "type": "string",
            "enum": [
                "pending",
                "accepted",
                "rejected"
            ],
            "x-enum-varnames": [
                "FriendRequestPending",
                "FriendRequestAccepted",
                "FriendRequestRejected"
            ]
        },
        "social_server_internal_models_postgres.Like": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "post": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    ]
                },
                "post_id": {
                    "type": "integer"
                },
                "type": {
                    "description": "like, love, haha, wow, sad, angry",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.Message": {
            "type": "object",
            "properties": {
                "chat_room": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoom"
                        }
                    ]
                },
                "chat_room_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "delivery_status": {
                    "description": "JSON as string",
                    "type": "string"
                },
                "edited_at": {
                    "type": "string"
                },
                "encrypted_content": {
                    "type": "string"
                },
                "forwarded_from": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                },
                "forwarded_from_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.MessageLocation"
                },
                "media": {
                    "description": "Embedded media and location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.MessageMedia"
                        }
                    ]
                },
                "mentions": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.MessageReaction"
                    }
                },
                "read_by": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.MessageRead"
                    }
                },
                "reply_to": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                },
                "reply_to_id": {
                    "type": "integer"
                },
                "sender": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "sender_id": {
                    "type": "integer"
                },
                "tags": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.MessageType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.MessageLocation": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "place_name": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.MessageMedia": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "mime_type": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.MessageReaction": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "emoji": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                        }
                    ]
                },
                "message_id": {
                    "type": "integer"
                },
                "reacted_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.MessageRead": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                        }
                    ]
                },
                "message_id": {
                    "type": "integer"
                },
                "read_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.MessageType": {
            "type": "string",
            "enum": [
                "text",
                "image",
                "video",
                "audio",
                "file",
                "system",
                "location",
                "text",
                "image",
                "video",
                "audio",
                "file",
                "system",
                "location"
            ],
            "x-enum-varnames": [
                "MessageTypeText",
                "MessageTypeImage",
                "MessageTypeVideo",
                "MessageTypeAudio",
                "MessageTypeFile",
                "MessageTypeSystem",
                "MessageTypeLocation"
            ]
        },
        "social_server_internal_models_postgres.Participant": {
            "type": "object",
            "properties": {
                "chat_room": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoom"
                        }
                    ]
                },
                "chat_room_id": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_muted": {
                    "type": "boolean"
                },
                "joined_at": {
                    "type": "string"
                },
                "last_read_at": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "permissions": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.ParticipantRole"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.ParticipantRole": {
            "type": "string",
            "enum": [
                "member",
                "admin",
                "owner",
                "member",
                "admin",
                "owner"
            ],
            "x-enum-varnames": [
                "ParticipantRoleMember",
                "ParticipantRoleAdmin",
                "ParticipantRoleOwner"
            ]
        },
        "social_server_internal_models_postgres.Post": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "author_id": {
                    "type": "integer"
                },
                "comment_count": {
                    "type": "integer"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "edited_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "is_edited": {
                    "type": "boolean"
                },
                "like_count": {
                    "type": "integer"
                },
                "likes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Like"
                    }
                },
                "location": {
                    "type": "string"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.PostMedia"
                    }
                },
                "mentioned_users": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "privacy": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.PostPrivacy"
                },
                "share_count": {
                    "type": "integer"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Share"
                    }
                },
                "tags": {
                    "description": "JSON array as string",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.PostType"
                },
                "updated_at": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.PostView"
                    }
                }
            }
        },
        "social_server_internal_models_postgres.PostMedia": {
            "type": "object",
            "properties": {
                "alt_text": {
                    "type": "string"
                },
                "blur_hash": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "filename": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "mime_type": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "post": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    ]
                },
                "post_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "thumbnail": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.PostPrivacy": {
            "type": "string",
            "enum": [
                "public",
                "friends",
                "private",
                "public",
                "friends",
                "private"
            ],
            "x-enum-varnames": [
                "PostPrivacyPublic",
                "PostPrivacyFriends",
                "PostPrivacyPrivate"
            ]
        },
        "social_server_internal_models_postgres.PostType": {
            "type": "string",
            "enum": [
                "text",
                "image",
                "video",
                "link",
                "audio",
                "text",
                "image",
                "video",
                "link",
                "audio"
            ],
            "x-enum-varnames": [
                "PostTypeText",
                "PostTypeImage",
                "PostTypeVideo",
                "PostTypeLink",
                "PostTypeAudio"
            ]
        },
        "social_server_internal_models_postgres.PostView": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "post": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    ]
                },
                "post_id": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "description": "NULL for anonymous views",
                    "type": "integer"
                },
                "view_duration": {
                    "description": "in seconds",
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.Profile": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "avatar_hash": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "wall_image": {
                    "type": "string"
                },
                "wall_image_hash": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_postgres.Share": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Optional comment when sharing",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "post": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                        }
                    ]
                },
                "post_id": {
                    "type": "integer"
                },
                "privacy": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.PostPrivacy"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.User": {
            "type": "object",
            "properties": {
                "ban_reason": {
                    "type": "string"
                },
                "banned_until": {
                    "type": "string"
                },
                "blocked_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.User"
                    }
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "friend_of": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.UserFriend"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_banned": {
                    "type": "boolean"
                },
                "is_online": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_seen": {
                    "type": "string"
                },
                "permissions": {
                    "description": "JSON array of permissions",
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.Profile"
                },
                "received_friend_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.FriendRequest"
                    }
                },
                "role": {
                    "type": "string"
                },
                "sent_friend_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.FriendRequest"
                    }
                },
                "settings": {
                    "description": "Embedded settings",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.UserSettings"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "user_friends": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.UserFriend"
                    }
                }
            }
        },
        "social_server_internal_models_postgres.UserFriend": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "friend": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.User"
                },
                "friend_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/social_server_internal_models_postgres.User"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_postgres.UserSettings": {
            "type": "object",
            "properties": {
                "notifications_email": {
                    "description": "Notification settings",
                    "type": "boolean"
                },
                "notifications_friend_requests": {
                    "type": "boolean"
                },
                "notifications_messages": {
                    "type": "boolean"
                },
                "notifications_posts": {
                    "type": "boolean"
                },
                "notifications_push": {
                    "type": "boolean"
                },
                "privacy_allow_friend_requests": {
                    "type": "boolean"
                },
                "privacy_profile_visibility": {
                    "description": "Privacy settings",
                    "type": "string"
                },
                "privacy_show_online_status": {
                    "type": "boolean"
                }
            }
        },
        "social_server_internal_models_requests.AcceptFriendRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_requests.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "social_server_internal_models_requests.ChatRoomType": {
            "type": "string",
            "enum": [
                "private",
                "group",
                "private",
                "group"
            ],
            "x-enum-varnames": [
                "ChatRoomTypePrivate",
                "ChatRoomTypeGroup"
            ]
        },
        "social_server_internal_models_requests.CreateChatRoomRequest": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "$ref": "#/definitions/social_server_internal_models_requests.ChatRoomType"
                }
            }
        },
        "social_server_internal_models_requests.CreateCommentRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "mentioned_users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "parent_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_requests.DeclineFriendRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_requests.InitiateCallRequest": {
            "type": "object",
            "required": [
                "callee_id",
                "type"
            ],
            "properties": {
                "callee_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "video",
                        "audio"
                    ]
                }
            }
        },
        "social_server_internal_models_requests.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "device_info": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "remember_me": {
                    "type": "boolean"
                }
            }
        },
        "social_server_internal_models_requests.PostPrivacy": {
            "type": "string",
            "enum": [
                "public",
                "friends",
                "private",
                "public",
                "friends",
                "private",
                "public",
                "friends",
                "private"
            ],
            "x-enum-varnames": [
                "PostPrivacyPublic",
                "PostPrivacyFriends",
                "PostPrivacyPrivate"
            ]
        },
        "social_server_internal_models_requests.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_requests.RegisterRequest": {
            "type": "object",
            "required": [
                "accept_privacy",
                "accept_terms",
                "email",
                "password"
            ],
            "properties": {
                "accept_privacy": {
                    "type": "boolean"
                },
                "accept_terms": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "social_server_internal_models_requests.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_requests.SharePostRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "privacy": {
                    "$ref": "#/definitions/social_server_internal_models_requests.PostPrivacy"
                }
            }
        },
        "social_server_internal_models_requests.UpdatePostRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "privacy": {
                    "$ref": "#/definitions/social_server_internal_models_requests.PostPrivacy"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "social_server_internal_models_responses.ActiveCallsResponse": {
            "type": "object",
            "properties": {
                "calls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_responses.CallResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_responses.CallDetailResponse": {
            "type": "object",
            "properties": {
                "callee_id": {
                    "type": "integer"
                },
                "caller_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "ended_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_group_call": {
                    "type": "boolean"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.CallParticipant"
                    }
                },
                "room_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_responses.CallHistoriesResponse": {
            "type": "object",
            "properties": {
                "calls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Call"
                    }
                },
                "next_cursor": {
                    "$ref": "#/definitions/paginator.Cursor"
                }
            }
        },
        "social_server_internal_models_responses.CallResponse": {
            "type": "object",
            "properties": {
                "callee_id": {
                    "type": "integer"
                },
                "caller_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "room_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_models_responses.CallStatsResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "social_server_internal_models_responses.ChatRoomSummary": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_muted": {
                    "type": "boolean"
                },
                "last_activity": {
                    "type": "string"
                },
                "last_message": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.Message"
                },
                "name": {
                    "type": "string"
                },
                "participant_count": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/social_server_internal_models_postgres.ChatRoomType"
                },
                "unread_count": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_responses.ChatRoomsResponse": {
            "type": "object",
            "properties": {
                "next_cursor": {
                    "$ref": "#/definitions/paginator.Cursor"
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_responses.ChatRoomSummary"
                    }
                }
            }
        },
        "social_server_internal_models_responses.CommentResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Comment"
                    }
                },
                "next_cursor": {
                    "$ref": "#/definitions/paginator.Cursor"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_models_responses.PostResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_models_postgres.Post"
                    }
                },
                "next_cursor": {
                    "$ref": "#/definitions/paginator.Cursor"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_services.AutoCompleteResponse": {
            "type": "object",
            "properties": {
                "suggestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_services.AutoCompleteSuggestion"
                    }
                }
            }
        },
        "social_server_internal_services.AutoCompleteSuggestion": {
            "type": "object",
            "properties": {
                "score": {
                    "type": "number"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_services.DateRange": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "social_server_internal_services.SearchRequest": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "date_range": {
                    "$ref": "#/definitions/social_server_internal_services.DateRange"
                },
                "facets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "from": {
                    "type": "integer"
                },
                "fuzzy": {
                    "type": "boolean"
                },
                "highlight": {
                    "type": "boolean"
                },
                "privacy": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "sort_by": {
                    "description": "relevance, date, popularity",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "post, user, comment",
                    "type": "string"
                }
            }
        },
        "social_server_internal_services.SearchResponse": {
            "type": "object",
            "properties": {
                "facets": {
                    "type": "object",
                    "additionalProperties": true
                },
                "has_more": {
                    "type": "boolean"
                },
                "max_score": {
                    "type": "number"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/social_server_internal_services.SearchResult"
                    }
                },
                "size": {
                    "type": "integer"
                },
                "suggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "took": {
                    "description": "Duration in milliseconds",
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "social_server_internal_services.SearchResult": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "string"
                },
                "author_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "highlights": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "privacy": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "User authentication and authorization",
            "name": "Authentication"
        },
        {
            "description": "User management and profiles",
            "name": "Users"
        },
        {
            "description": "Post creation, management and social interactions",
            "name": "Posts"
        },
        {
            "description": "WebRTC video calling functionality",
            "name": "Calls"
        },
        {
            "description": "File upload and management",
            "name": "Uploads"
        },
        {
            "description": "Advanced search with Bleve full-text search",
            "name": "Search"
        },
        {
            "description": "Real-time chat and messaging functionality",
            "name": "Chat"
        }
    ]
}